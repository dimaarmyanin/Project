from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "–≤–∞—à_—Ç–æ–∫–µ–Ω"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ @userinfobot)
ADMIN_ID = –≤–∞—à_id  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID (—á–∏—Å–ª–æ–≤–æ–π)

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–µ–Ω–∞–º–∏
SERVICES = {
    "–£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã ÔøΩ": 1000, 
    "–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã üî®": 5000, 
    "–ú–æ–π–∫–∞ –æ–∫–æ–Ω ü™ü": 1500, 
    "–°—Ç—Ä–∏–∂–∫–∞ –≥–∞–∑–æ–Ω–∞ üå±": 800, 
    "–°–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏ ü™ë": 2000
}

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –≠—Ç–∞–ø—ã –∑–∞–∫–∞–∑–∞
STAGES = {
    'address': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:',
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("–£—Å–ª—É–≥–∏ üõ†Ô∏è", callback_data="services")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥. –ù–∞–∂–º–∏—Ç–µ '–£—Å–ª—É–≥–∏', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É. üòä", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ª—É–≥
async def show_services(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton(service, callback_data=service)] for service in SERVICES.keys()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await update.callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —É—Å–ª—É–≥ üß∞:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
async def handle_service_selection(update: Update, context: CallbackContext) -> None:
    selected_service = update.callback_query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —É—Å–ª—É–≥–æ–π
    if selected_service not in SERVICES:
        await update.callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —É—Å–ª—É–≥–∞

    price = SERVICES[selected_service]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
    user_data[update.callback_query.from_user.id] = {
        'service': selected_service, 'price': price, 'stage': 'address'
    }
    
    await update.callback_query.answer()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
    await update.callback_query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: {selected_service} ‚úÖ\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
async def get_address(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id in user_data and user_data[user_id]['stage'] == 'address':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        user_data[user_id]['address'] = update.message.text
        service = user_data[user_id]['service']
        price = user_data[user_id]['price']
        address = user_data[user_id]['address']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –≤–∫–ª—é—á–∞—è user_id
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n–£—Å–ª—É–≥–∞: {service}\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π\n–ê–¥—Ä–µ—Å: {address}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.message.from_user.full_name} (@{update.message.from_user.username})\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /reply <user_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>."
        )
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(f"–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —É—Å–ª—É–≥—É '{service}' –ø—Ä–∏–Ω—è—Ç! üìù\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.\n–ê–¥—Ä–µ—Å: {address}\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        del user_data[user_id]
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def contact_admin(update: Update, context: CallbackContext) -> None:
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_data[update.message.from_user.id] = {'stage': 'contact_admin'}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in user_data:
        stage = user_data[user_id].get('stage')

        if stage == 'contact_admin':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.full_name} (@{update.message.from_user.username}):\n\n{update.message.text}"
            )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∫—É
            await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data[user_id]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_reply(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–µ–ª ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if len(context.args) < 2:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <user_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return
    
    user_id = context.args[0]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reply_text = " ".join(context.args[1:])  # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {reply_text}"
        )
        await update.message.reply_text(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}. –û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("contact", contact_admin))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(show_services, pattern="services"))
    application.add_handler(CallbackQueryHandler(handle_service_selection))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_address))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /reply
    application.add_handler(CommandHandler("reply", admin_reply, has_args=True))
    
    application.run_polling()

if __name__ == '__main__':
    main()